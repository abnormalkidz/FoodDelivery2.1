// <auto-generated />
using System;
using FoodDelivery2.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDelivery2.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("FoodDelivery2.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26a9db42-0087-4fe9-8f51-0d42ed0ab8ce",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEH7qpKS8Y9EfKDdkGdV3o3rSyjjNf8WuAx7/HxupIKnB8HSP8tjKRN0Hs/13qn5FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98a60f77-0c9d-43c6-8874-94aa977f2fa3",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustPhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetCalories")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("TargetFats")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("TargetProtein")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DriverPhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeOfTransport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ans")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Qns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Calories")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Fats")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("FoodItem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Halal")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "Nil",
                            Calories = 0,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4095),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4096),
                            Fats = 0.0,
                            FoodItem = "No Food Item",
                            Halal = true,
                            Price = 0.0,
                            Protein = 0.0,
                            Remarks = "Nil",
                            Size = "Nil",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "Nil",
                            Calories = 5000,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4101),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4102),
                            Fats = 0.55000000000000004,
                            FoodItem = "Burger",
                            Halal = true,
                            Price = 3.5,
                            Protein = 0.5,
                            Remarks = "Nil",
                            Size = "Small",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            Allergies = "Peanuts",
                            Calories = 3000,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4109),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4109),
                            Fats = 0.14999999999999999,
                            FoodItem = "Mala",
                            Halal = true,
                            Price = 3.5,
                            Protein = 0.29999999999999999,
                            Remarks = "Nil",
                            Size = "Large",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.FoodOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FoodCalories")
                        .HasColumnType("int");

                    b.Property<double?>("FoodFats")
                        .HasColumnType("float");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<double?>("FoodPrice")
                        .HasColumnType("float");

                    b.Property<double?>("FoodProtein")
                        .HasColumnType("float");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalCalories")
                        .HasColumnType("int");

                    b.Property<double?>("TotalFats")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalProtein")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4379),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(4380),
                            FoodId = 1,
                            Qty = 0,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuisinePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            Cuisine = "Western",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5784),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5786),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            Cuisine = "Korean",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5790),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5791),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            Cuisine = "Malay",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5794),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5794),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            Cuisine = "Indonesian",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5797),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5798),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            Cuisine = "Malay",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5800),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5801),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            Cuisine = "Chinese",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5803),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5804),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            Cuisine = "Malay",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5806),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5807),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            Cuisine = "Japanese",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5809),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5810),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            Cuisine = "Italian",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5812),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5813),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            Cuisine = "Thai",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5815),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5816),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaloriesIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("FatsIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodOrderId1")
                        .HasColumnType("int");

                    b.Property<int?>("FoodOrderId2")
                        .HasColumnType("int");

                    b.Property<int?>("FoodOrderId3")
                        .HasColumnType("int");

                    b.Property<string>("ProteinIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalCalories")
                        .HasColumnType("int");

                    b.Property<double?>("TotalFats")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalProtein")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FoodOrderId1");

                    b.HasIndex("FoodOrderId2");

                    b.HasIndex("FoodOrderId3");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("FoodOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Amount")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PCExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 0.0,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5243),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 412, DateTimeKind.Local).AddTicks(5265),
                            PCExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PromoName = "NIL",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(3628),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(3640),
                            Location = "Tampines Mall",
                            RestoName = "DTF",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(3643),
                            DateUpdated = new DateTime(2024, 2, 4, 0, 3, 13, 316, DateTimeKind.Local).AddTicks(3644),
                            Location = "Bedok Corner",
                            RestoName = "Mala Wok",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverID");

                    b.HasIndex("OrderID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Customer", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Customer", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("FoodDelivery2.Shared.Domain.Review", "Review")
                        .WithMany("Customers")
                        .HasForeignKey("ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.FoodOrder", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Menu", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Food", "Food")
                        .WithMany("Menus")
                        .HasForeignKey("FoodId");

                    b.HasOne("FoodDelivery2.Shared.Domain.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Food");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Order", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("FoodDelivery2.Shared.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("FoodDelivery2.Shared.Domain.FoodOrder", "FoodOrder1")
                        .WithMany("FoodOrder1Order")
                        .HasForeignKey("FoodOrderId1");

                    b.HasOne("FoodDelivery2.Shared.Domain.FoodOrder", "FoodOrder2")
                        .WithMany("FoodOrder2Order")
                        .HasForeignKey("FoodOrderId2");

                    b.HasOne("FoodDelivery2.Shared.Domain.FoodOrder", "FoodOrder3")
                        .WithMany("FoodOrder3Order")
                        .HasForeignKey("FoodOrderId3");

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("FoodOrder1");

                    b.Navigation("FoodOrder2");

                    b.Navigation("FoodOrder3");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Payment", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.FoodOrder", "FoodOrder")
                        .WithMany()
                        .HasForeignKey("FoodOrderId");

                    b.HasOne("FoodDelivery2.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");

                    b.HasOne("FoodDelivery2.Shared.Domain.PromoCode", "PromoCode")
                        .WithMany("Payments")
                        .HasForeignKey("PromoCodeId");

                    b.Navigation("FoodOrder");

                    b.Navigation("Order");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.PromoCode", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Customer", "Customer")
                        .WithMany("PromoCodes")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Restaurant", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Review", "Review")
                        .WithMany("Restaurant")
                        .HasForeignKey("ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Review", b =>
                {
                    b.HasOne("FoodDelivery2.Shared.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID");

                    b.HasOne("FoodDelivery2.Shared.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.Navigation("Driver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDelivery2.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDelivery2.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery2.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDelivery2.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Orders");

                    b.Navigation("PromoCodes");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Food", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.FoodOrder", b =>
                {
                    b.Navigation("FoodOrder1Order");

                    b.Navigation("FoodOrder2Order");

                    b.Navigation("FoodOrder3Order");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.PromoCode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Restaurant", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("FoodDelivery2.Shared.Domain.Review", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Restaurant");
                });
#pragma warning restore 612, 618
        }
    }
}
