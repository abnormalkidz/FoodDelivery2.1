@page "/reviews/createDriverReview/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Create New Review</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">

	<DataAnnotationsValidator />
	<ValidationSummary />

	
	<div class="form-group">
		<label> Rating: </label>
		<div>
			<div>
				<InputSelect @bind-Value="review.Rating" class="form-control">
					<option value="">-- Select Rating --</option>
					<option value="1">1 </option>
					<option value="2">2</option>
					<option value="3">3</option>
					<option value="4">4 </option>
					<option value="5">5 </option>
				</InputSelect>
			</div>
		</div>
	</div>
	
	<div class="form-group">
		<label>Remarks: </label>
		<div>
			<InputText @bind-Value="review.Remarks" class="form-control" />
			<ValidationMessage For="@(()=> review.Remarks)" />
		</div>
	</div>
	<button type="submit" class="btn btn-success btn-block">
		Create Review
	</button>
</EditForm>

@code {
	Review review = new Review();
	private IList<Driver>? Drivers;
	private IList<Order>? Orders;

	[Parameter] public int id { get; set; }

	protected async override Task OnInitializedAsync()
	{
		Drivers = await _client.GetFromJsonAsync<List<Driver>>($"{Endpoints.DriversEndpoint}");
		Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
	}

	private async Task CreateReview()
	{
		review.DriverID = id;
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo("/drivers/review/"+ id.ToString());
	}

} 