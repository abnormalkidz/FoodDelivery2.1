@page "/orders/review/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h2>Review</h2>

<a href="/reviews/createOrderReview/@id" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Review 
</a>
<br />
<br />

@if (Reviews == null)
{
    <div class="alert alert-info">Loading Review...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Order food 1</th>
                <th>Order food 2</th>
                <th>Order food 3</th>
                <th>Rating</th>
                <th>Remarks</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
                if (@review.OrderID == id)
                {
                    <tr>
                        <td>@review.Order.FoodOrder1.Food.FoodItem</td>
                        <td>@review.Order.FoodOrder2.Food.FoodItem</td>
                        <td>@review.Order.FoodOrder3.Food.FoodItem</td>
                        <td>@review.Rating</td>
                        <td>@review.Remarks</td>
                        <td>
                            <a href=" /reviews/view/@review.Id" class=" btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href=" /reviews/edit/@review.Id" class=" btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(review.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }

            }

        </tbody>
    </table>
}

@code {
    [Parameter] public int id { get; set; }
    private List<Review>? Reviews;
    private List<Order>? Orders;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    async Task Delete(int reviewId)
    {
        var review = Reviews?.First(q => q.Id == reviewId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
            await OnInitializedAsync();
        }
    }

}