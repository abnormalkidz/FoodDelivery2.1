@inject HttpClient _client
@using FoodDelivery2.Client.Components

<h3>FormComponent</h3>

<EditForm Model="@restaurant" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        div class="form-group">
    <label> Photo:</label>
    <div>
            <img src="@restaurant.RestoName" style="width: 250px; height: 250px;"> <br /> <br />
      <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>
  
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="restaurant.RestoName" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.RestoName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Restaurant Name: </label>
            <div>
                <InputText @bind-Value="restaurant.RestoName" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.RestoName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Address: </label>
            <div>
                <InputText @bind-Value="restaurant.Location" class="form-control" />
                <ValidationMessage For="@(()=> restaurant.Location)" />
            </div>
        </div>
        

        <BackToList Target="restaurants"/>

    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>

    }

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Restaurant? restaurant { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        var file = inputFileChangeEvent.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        restaurant.RestaurantPhoto = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

}