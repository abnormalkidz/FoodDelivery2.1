@inject HttpClient _client
@using FoodDelivery2.Client.Components


<EditForm Model="@driver" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Name: </label>
			<div>
				<InputText @bind-Value="driver.DriverName" class="form-control" />
				<ValidationMessage For="@(()=> driver.DriverName)" />
			</div>

			<div class="form-group">
				<label>Mode Of Transport: </label>
				<div>
					<InputSelect @bind-Value="driver.ModeOfTransport" class="form-control">
						<option value="">-- Select Mode Of Transport --</option>
						<option value="Car">Car</option>
						<option value="Bicycle">Bicycle</option>
						<option value="Motorcycle">Motorcycle</option>
						<option value="Foot">Foot</option>
					</InputSelect>
					<ValidationMessage For="@(()=> driver.ModeOfTransport)" />
				</div>
			</div>
			<div class="form-group">
				<label>Email: </label>
				<div>
					<InputText @bind-Value="driver.DriverEmail" class="form-control" />
					<ValidationMessage For="@(()=> driver.DriverEmail)" />
				</div>
			</div>
			<div class="form-group">
				<label>Phone Number: </label>
				<div>
					<InputText @bind-Value="driver.DriverPhoneNo" class="form-control" />
					<ValidationMessage For="@(()=> driver.DriverPhoneNo)" />
				</div>
			</div>
			<div class="form-group">
				<label>Order Status: </label>
				<div>
					<InputSelect @bind-Value="driver.OrderStatus" class="form-control">
						<option value="">-- Select Order Status --</option>
						<option value="Available">Available</option>
						<option value="Ongoing">Ongoing</option>
						<option value="Delivered">Delivered</option>
					</InputSelect>
					<ValidationMessage For="@(()=> driver.OrderStatus)" />
				</div>
			</div>
		</div>
		<BackToList Target="drivers" />
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>

	}
	
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Driver? driver { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
	{
		var file = inputFileChangeEvent.File;

		var buffer = new byte[file.Size];
		await file.OpenReadStream().ReadAsync(buffer);

		driver.DriverPhoto = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
	}
}
